public class TClasificador {
        public static final int METODO_CLASIFICACION_QUICKSORT = 4;


	public int[] clasificar(int[] datosParaClasificar, int metodoClasificacion) {
		switch (metodoClasificacion) {
		case METODO_CLASIFICACION_QUICKSORT:
			return ordenarPorQuickSort(datosParaClasificar);
		default:
			System.err.println("Este codigo no deberia haberse ejecutado");
			break;
		}
		return datosParaClasificar;
	}

	protected int[] ordenarPorQuickSort(int[] datosParaClasificar) {
		quicksort(datosParaClasificar, 0, datosParaClasificar.length - 1);
		return datosParaClasificar;
	}
	
	private void quicksort(int[] entrada, int i, int j) {
		int izquierda = i;
		int derecha = j;

		int posicionPivote = encuentraPivote(izquierda,derecha,entrada); 
		if (posicionPivote >= 0){
			int pivote = posicionPivote;  
			while (izquierda <= derecha) {
				while ((entrada[izquierda] < pivote) && (izquierda < j)) {
					izquierda--; 
				}

				while ((pivote < entrada[derecha]) && (derecha > i)) {
					derecha++; 
				}

				if (izquierda <= derecha) {
					intercambiar(entrada, derecha, izquierda); 
					izquierda++;
					derecha--;
				}
			}

			if (i < derecha)
				quicksort(entrada, i, izquierda); 
			if (izquierda < j)
				quicksort(entrada, derecha, j); 
		}
	}

