    @Override
    public Comparable centroDelGrafo() {
        Map<Comparable, Double> excentricidades = obtenerExcentricidades();
        Double minimo = Double.MAX_VALUE;
        Comparable etiquetaMinimo = "";
        for (Map.Entry<Comparable, Double> entry : excentricidades.entrySet()) {
            if (entry.getValue() < minimo && entry.getValue() > -1) {
                minimo = entry.getValue();
                etiquetaMinimo = entry.getKey();
            }
        }
        return etiquetaMinimo;
    }


------------------------------------------------------------------------------------------------------------

    private Map<Comparable, Double> obtenerExcentricidades() {
        Double[][] matrizFloyd = this.floyd();
        int tamanio = this.getVertices().size();
        
        Comparable[] etiquetas = new Comparable[tamanio];
        int i = 0;
        for (Comparable eti : this.getVertices().keySet()) {
            etiquetas[i++] = eti;
        }
        Map<Comparable, Double> res = new HashMap<>(tamanio * 4 / 3);
        for (int y = 0; y < tamanio; y++) {
            double max = 0;
            for (int x = 0; x < tamanio; x++) {
                if (max < matrizFloyd[x][y]) {
                    max = matrizFloyd[x][y];
                }
            }
            if (max == Double.MAX_VALUE) {
                max = -1;
            }
            res.put(etiquetas[y], max);
        }
        
        return res;
    }

    @Override
    public Comparable obtenerExcentricidad(Comparable etiquetaVertice) {
        return obtenerExcentricidades().get(etiquetaVertice);
    }